{"name":"PythonJS","tagline":"Python to JavaScript Translator","body":"PythonJS\r\n############\r\n\r\n![alt text](http://4.bp.blogspot.com/-24HxG7miZnE/UoHEmzmAByI/AAAAAAAAAgM/C_NwyODm5gY/s400/pythonjs-nodejs-0.8.4.png \"PythonJS\")\r\n\r\n\r\nIntroduction\r\n======\r\n\r\nPythonJS is a Python to Javascript translator written in Python, created by Amirouche Boubekki and Brett Hartshorn. It converts a subset of Python into a subset of Javascript.  It features: list comprehensions, classes, multiple inheritance, first-class functions, operator overloading, function and class decorators, HTML DOM, and easily integrates with JavaScript and external JavaScript libraries.  The generated code works in the Browser and in NodeJS.\r\n\r\n---------------\r\n\r\nGetting Started\r\n---------------\r\n\r\nGet Source Code::\r\n\r\n\tgit clone https://github.com/PythonJS/PythonJS.git\r\n\r\nTranslate Your Script::\r\n\r\n\tcd PythonJS/pythonjs\r\n\t./translator.py myscript1.py myscript2.py > ~/myapp.js\r\n\r\nThe translator.py script can take in multiple Python scripts, these are appended together, and translated into a single JavaScript.  The output is printed to stdout.  If no command line arguments is given, then translator.py takes input from stdin.\r\n\r\n\r\nTest Server (server.py)\r\n========\r\n\r\nInstall Tornado for Python3::\r\n\r\n\twget https://pypi.python.org/packages/source/t/tornado/tornado-3.1.1.tar.gz\r\n\ttar xvf tornado-3.1.1.tar.gz\r\n\tcd tornado-3.1.1\r\n\tpython3 setup.py build\r\n\tsudo python3 setup.py install\r\n\r\nRun Test Server::\r\n\r\n\tcd PythonJS/tests\r\n\t./server.py\r\n\r\nThen open a web browser and go to: http://localhost:8080\r\n\r\nThe test server dynamically compiles Python into JavaScript, this greatly speeds up the testing and development process.  Any html file you place in the PythonJS/tests directory will become available as a new web-page.  When this web-page is requested the server will parse the html and check all the <script> tags for external or embedded Python, and dynamically convert it to JavaScript.\r\n\r\nExternal Python Scripts::\r\n\r\n\t<head>\r\n\t<script src=\"bindings/three.py\"></script>\r\n\t</head>\r\n\r\nThe server knows that the above script needs to be dynamically compiled to JavaScript because the script is located in the \"bindings\" directory and the file name ends with \".py\"\r\n\r\nEmbedded Python Scripts::\r\n\r\n\t<body>\r\n\t<script type=\"text/python\">\r\n\tfrom three import *\r\n\tv1 = Vector3( x=1, y=2, z=3 )\r\n\tv2 = Vector3( x=4, y=5, z=6 )\r\n\tv3 = v1 + v2\r\n\t</script>\r\n\t</body>\r\n\r\nThe server knows that above is an embedded Python script because the script tag has its type attribute set to \"text/python\".  The server will compile and replace the Python code with JavaScript, change the type attribute to be \"text/javascript\", and serve the page to the client.\r\n\r\nThe syntax \"from three import *\" tells the compiler to load static type information about the previously compiled binding \"three.py\" into the compilers namespace, this is required because three.py uses operator overloading to wrap the THREE.js API.  PythonJS programs are explicitly and implicitly statically typed to allow for operator overloading and optimizations.\r\n\r\n---------------\r\n\r\nDirectly Calling JavaScript Functions\r\n---------------\r\n\r\nHTML DOM Example::\r\n\r\n\t<html><head>\r\n\t<script src=\"pythonscript.js\"></script>\r\n\r\n\t<script type=\"text/python\">\r\n\r\n\tcount = 0\r\n\r\n\tdef mycallback():\r\n\t\tglobal count\r\n\t\tprint( con.getAttribute('id') )\r\n\t\tbtn = document.getElementById('mybutton')\r\n\t\tbtn.firstChild.nodeValue = 'COUNTER:'+count\r\n\t\tcount += 1\r\n\r\n\ta = 'hello'\r\n\tb = 'world'\r\n\r\n\tdef test():\r\n\t\tcon = document.createElement( 'div' )\r\n\t\tcon.setAttribute('id', 'mydiv')\r\n\t\tdocument.body.appendChild(con)\r\n\t\ttxt = document.createTextNode( a+b )\r\n\t\tcon.appendChild(txt)\r\n\r\n\t\twindow.setInterval( mycallback, 1000 )\r\n\r\n\t</script>\r\n\r\n\t</head><body>\r\n\r\n\t<button id=\"mybutton\" onclick=\"test()\">click me</button>\r\n\r\n\t</body>\r\n\t</html>\r\n\r\nNumbers and strings can be passed directly to JavaScript functions.  Simple callbacks that do not take any arguments can also be passed as an argument to a JavaScript function, like window.setInterval.  PythonJS allows you to call any JavaScript function directly by wrapping it at runtime.  Attributes of JavaScript objects are also returned directly, like document.body.  This allows you to use the HTML DOM API just as you would in normal JavaScript.\r\n\r\n---------------\r\n\r\nInline JavaScript\r\n---------------\r\n\r\nThere are times that JavaScript needs to be directly inlined into PythonJS code, this is done with the special 'JS([str])' function that takes a string literal as its only argument.  The compiler will insert the string directly into the final output JavaScript.\r\n\r\nJS Example::\r\n\r\n\tJS(\"var arr = new Array()\")\r\n\tJS(\"var ob = new Object()\")\r\n\tJS(\"ob['key'] = 'value'\")\r\n\tif JS(\"Object.prototype.toString.call( arr ) === '[object Array]'\"):\r\n\t\tJS(\"arr.push('hello world')\")\r\n\t\tJS(\"arr.push( ob )\")\r\n\r\nIn the example above we create a new JavaScript Array.  The if statement is still Python syntax, but its condition is allowed to be inlined JavaScript.  As the compiler becomes smarter and the PythonJS low-level API develops, there will be less need to write inline JavaScript in the above style.  Lets take a look at two alternative ways this can be rewritten.\r\n\r\n1. JSArray, JSObject, and instanceof::\r\n\r\n\tarr = JSArray()\r\n\tob = JSObject()\r\n\tif instanceof(arr, Array):\r\n\t\tarr.push('hello world')\r\n\t\tarr.push( ob )\r\n\r\nThe special function JSArray will create a new JavaScript Array object, and JSObject creates a new JavaScript Object.  The 'instanceof' function will be translated into using the 'instanceof' JavaScript operator.  At the end, arr.push is called without wrapping it in JS(), this is allowed because from PythonJS, we can directly call JavaScript functions by dynamically wrapping it at runtime.\r\n\r\nThis code is more clear than before, but the downside is that the calls to arr.push will be slower because it gets wrapped at runtime.  To have fast and clear code we need to use the final method below, 'with javascript'\r\n\r\n2. with javascript::\r\n\r\n\twith javascript:\r\n\t\tarr = []\r\n\t\tob = {}\r\n\t\tif instanceof(arr, Array):\r\n\t\t\tarr.push('hello world')\r\n\t\t\tarr.push( ob )\r\n\r\nThe \"with javascript:\" statement can be used to mark a block of code as being direct JavaScript.  The compiler will basically wrap each line it can in JS() calls.  The calls to arr.push will be fast because there is no longer any runtime wrapping.  Instead of using JSArray and JSObject you just use the literal notation to create them.\r\n\r\n---------------\r\n\r\nCalling PythonJS Functions from JavaScript\r\n------------------------------\r\n\r\nPythonJS functions can be used as callbacks in Javascript code, there are no special calling conventions that you need to worry about.  Simply define a function in PythonJS and call it from JavaScript.  Note that if your PythonJS function uses keyword arguments, you can use them as a normal positional arguments.\r\n\r\nExample::\r\n\r\n\t# PythonJS\r\n\tdef my_pyfunction( a,b,c, optional='some default'):\r\n\t\tprint a,b,c, optional\r\n\r\n\t// javascript\r\n\tmy_pyfunction( 1,2,3, 'my kwarg' );\r\n\r\n\r\n---------------\r\n\r\nCalling PythonJS Methods from JavaScript\r\n------------------------------\r\n\r\nCalling PythonJS methods is also simple, you just need to create an instance of the class in PythonJS and then pass the method to a JavaScript function, or assign it to a new variable that the JavaScript code will use.  PythonJS takes care of wrapping the method for you so that \"self\" is bound to the method, and is callable from JavaScript.\r\n\r\nExample::\r\n\r\n\t// javascript\r\n\tfunction js_call_method( method_callback ) {\r\n\t\tmethod_callback( 1,2,3 )\r\n\t}\r\n\r\n\t# PythonJS\r\n\tclass A:\r\n\t\tdef my_method(self, a,b,c):\r\n\t\t\tprint self, a,b,c\r\n\t\t\tself.a = a\r\n\t\t\tself.b = b\r\n\t\t\tself.c = c\r\n\r\n\ta = A()\r\n\tjs_call_method( a.my_method )\r\n\r\n\r\n---------------\r\n\r\nPassing PythonJS Instances to JavaScript\r\n------------------------------\r\n\r\nIf you are doing something complex like deep integration with an external JavaScript library, the above technique of passing each method callback to JavaScript might become inefficient.  If you want to pass the PythonJS instance itself and have its methods callable from JavaScript, you can do this now simply by passing the instance.  This only works for normal methods, not with property getter/setters.\r\n\r\nExample::\r\n\r\n\t// javascript\r\n\tfunction js_function( pyob ) {\r\n\t\tpyob.foo( 1,2,3 )\r\n\t\tpyob.bar( 4,5,6 )\r\n\t}\r\n\r\n\t# PythonJS\r\n\tclass A:\r\n\t\tdef foo(self, a,b,c):\r\n\t\t\tprint a+b+c\r\n\t\tdef bar(self, a,b,c):\r\n\t\t\tprint a*b*c\r\n\r\n\ta = A()\r\n\tjs_function( a )\r\n\r\n\r\n---------------\r\n\r\nDefine JavaScript Prototypes from PythonJS\r\n------------------------------\r\n\r\nIf you are going beyond simple integration with an external JavaScript library, and perhaps want to change the way it works on a deeper level, you can modify JavaScript prototypes from PythonJS using some special syntax.\r\n\r\nExample::\r\n\r\n\twith javascript:\r\n\r\n\t\t@String.prototype.upper\r\n\t\tdef func():\r\n\t\t\treturn this.toUpperCase()\r\n\r\n\t\t@String.prototype.lower\r\n\t\tdef func():\r\n\t\t\treturn this.toLowerCase()\r\n\r\n\t\t@String.prototype.index\r\n\t\tdef func(a):\r\n\t\t\treturn this.indexOf(a)\r\n\r\nThe above example shows how we modify the String type in JavaScript to act more like a Python string type.  The functions must be defined inside a \"with javascript:\" block, and the decorator format is: `[class name].prototype.[function name]`\r\n\r\n\r\n---------------\r\n\r\nMaking PythonJS Wrappers for JavaScript Libraries\r\n------------------------------\r\n\r\nThe above techniques provide all the tools you will need to interact with JavaScript code, and easily write wrapper code in PythonJS.  The last tool you will need, is a standard way of creating JavaScript objects, storing a reference to the instance, and later passing the instance to wrapped JavaScript function.  In JavaScript objects are created with the `new` keyword, in PythonJS you can use the `new()` function instead.  To store an instance created by `new()`, you should assign it to `self` like this: `self[...] = new( SomeJavaScriptClass() )`.  \r\n\r\nIf you have never seen `...` syntax in Python it is the rarely used Ellipsis syntax, we have hijacked it in PythonJS as a special case to assign something to a hidden attribute.  The builtin types: tuple, list, dict, etc, are wrappers that internally use JavaScript Arrays or Objects, to get to these internal objects you use the Ellipsis syntax.  The following example shows how the THREE.js binding wraps the Vector3 object and combines operator overloading.\r\n\r\nExample::\r\n\r\n\tclass Vector3:\r\n\t\tdef __init__(self, x=0, y=0, z=0, object=None ):\r\n\t\t\tif object:\r\n\t\t\t\tself[...] = object\r\n\t\t\telse:\r\n\t\t\t\twith javascript:\r\n\t\t\t\t\tself[...] = new(THREE.Vector3(x,y,z))\r\n\r\n\t\t@property\r\n\t\tdef x(self):\r\n\t\t\twith javascript: return self[...].x\r\n\t\t@x.setter\r\n\t\tdef x(self, value):\r\n\t\t\twith javascript: self[...].x = value\r\n\r\n\t\t@property\r\n\t\tdef y(self):\r\n\t\t\twith javascript: return self[...].y\r\n\t\t@y.setter\r\n\t\tdef y(self, value):\r\n\t\t\twith javascript: self[...].y = value\r\n\r\n\t\t@property\r\n\t\tdef z(self):\r\n\t\t\twith javascript: return self[...].z\r\n\t\t@z.setter\r\n\t\tdef z(self, value):\r\n\t\t\twith javascript: self[...].z = value\r\n\r\n\t\tdef set(self, x,y,z):\r\n\t\t\tself[...].set(x,y,z)\r\n\r\n\t\tdef add(self, other):\r\n\t\t\tassert isinstance(other, Vector3)\r\n\t\t\tself.set( self.x+other.x, self.y+other.y, self.z+other.z )\r\n\t\t\treturn self\r\n\r\n\t\tdef addScalar(self, s):\r\n\t\t\tself.set( self.x+s, self.y+s, self.z+s )\r\n\t\t\treturn self\r\n\r\n\t\tdef __add__(self, other):\r\n\t\t\tif instanceof(other, Object):\r\n\t\t\t\tassert isinstance(other, Vector3)\r\n\t\t\t\treturn Vector3( self.x+other.x, self.y+other.y, self.z+other.z )\r\n\t\t\telse:\r\n\t\t\t\treturn Vector3( self.x+other, self.y+other, self.z+other )\r\n\r\n\t\tdef __iadd__(self, other):\r\n\t\t\tif instanceof(other, Object):\r\n\t\t\t\tself.add( other )\r\n\t\t\telse:\r\n\t\t\t\tself.addScalar( other )\r\n\r\n\r\n---------------\r\n\r\nOptimized Function Calls\r\n------------------------------\r\n\r\nBy default PythonJS functions have runtime call checking that ensures you have called the function with the required number of arguments, and also checks to see if you had called the function from JavaScript - and if so adapt the arguments.  This adds some overhead each time the function is called, and will generally be about 15 times slower than normal Python.  When performance is a concern you can decorate functions that need to be fast with @fastdef, or use the `with fastdef:` with statement.  Note that functions that do not have arguments are always fast.  Using fastdef will make each call to your function 100 times faster, so if you call the same function many times in a loop, it is a good idea to decorate it with @fastdef.\r\n\r\nExample::\r\n\r\n\t@fastdef\r\n\tdef f1( a, b, c ):\r\n\t\treturn a+b+c\r\n\r\n\twith fastdef:\r\n\t\tdef f2( a,b,c, x=1,y=2,z=3):\r\n\t\t\treturn a+b+c+x+y+z\r\n\r\nIf you need to call a fastdef function from JavaScript you will need to call it with arguments packed into an array as the first argument, and keyword args packed into an Object as the second argument.\r\n\r\nExample::\r\n\r\n\t// javascript\r\n\tf2( [1,2,3], {x:100, y:200, z:300} );\r\n\r\nIf you need fast function that is callable from javascript without packing its arguments like above, you can use the @javascript decorator, or nest the function inside a `with javascript:` statement.\r\n\r\nExample::\r\n\r\n\t@javascript\r\n\tdef f( a,b,c, x=1, y=2, z=3 ):\r\n\t\treturn a+b+c+x+y+z\r\n\r\n\t// javascript\r\n\tf( 1,2,3, 100, 200, 300 );\r\n\r\n\r\n\r\n---------------\r\n\r\nNodeJS\r\n------------------------------\r\n\r\nPythonJS can also be used to write server side software using NodeJS.  You can use the nodejs.py helper script to translate your python script and run it in NodeJS.  This has been tested with NodeJS v0.6.19.\r\n\r\nExample::\r\n\r\n\tcd PythonJS\r\n\t./nodejs.py myscript.py\r\n\r\nThe directory PythonJS/nodejs/bindings contains wrappers for using NodeJS modules.  Some of these wrappers emulate parts of Pythons standard library, like: os, sys and io.  The example below imports the fake io and sys libraries, and prints the contents of a file passed as the last command line argument to nodejs.py.\r\n\r\nExample::\r\n\r\n\tfrom nodejs.io import *\r\n\tfrom nodejs.sys import *\r\n\r\n\tpath = sys.argv[ len(sys.argv)-1 ]\r\n\tf = open( path, 'rb' )\r\n\tprint f.read()\r\n\r\n------------------------------\r\n\r\n\r\n.. image:: https://d2weczhvl823v0.cloudfront.net/PythonJS/pythonjs/trend.png\r\n   :alt: Bitdeli badge\r\n   :target: https://bitdeli.com/free\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}