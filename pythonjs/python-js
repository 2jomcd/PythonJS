// python-js module for nodejs //

var _path = require('path');
var pyjs = require('./pythonjs.js');
var empythoned = require('./empythoned.js');
var Python = empythoned.Python;
var buffer = [];
var _on_stderr = function(chr) {
	if (chr == null || chr == 0 || chr == 10) {
		console.log( buffer.join('') );
		buffer.length = 0;
	} else {
		buffer.push( String.fromCharCode(chr) );
	}
}



// https://github.com/kripken/emscripten/wiki/Filesystem-API
empythoned.FS.createLazyFile(".", "python_to_pythonjs.py", "./python_to_pythonjs.py",
	true,false
);
empythoned.FS.createLazyFile(".", "pythonjs.py", "./pythonjs.py",
	true,false
);
empythoned.FS.createLazyFile(".", "ministdlib.py", "./ministdlib.py",
	true,false
);

empythoned.FS.createLazyFile(".", "pythonjs_to_dart.py", "./pythonjs_to_dart.py",
	true,false
);

empythoned.FS.createLazyFile(".", "pythonjs_to_coffee.py", "./pythonjs_to_coffee.py",
	true,false
);

empythoned.FS.createLazyFile(".", "pythonjs_to_lua.py", "./pythonjs_to_lua.py",
	true,false
);

empythoned.FS.createLazyFile(".", "python_to_visjs.py", "./python_to_visjs.py",
	true,false
);


Python.initialize(
	null,         // stdin
	null,         // stdout
	_on_stderr     // stderr
);


Python.eval('from python_to_pythonjs import main as to_pythonjs');
Python.eval('from pythonjs import main as _to_javascript');
Python.eval('from pythonjs_to_dart import main as _to_dart');
Python.eval('from pythonjs_to_coffee import main as _to_coffee');
Python.eval('from pythonjs_to_lua import main as _to_lua');
Python.eval('from python_to_visjs import main as to_visjs');

Python.eval('def to_javascript(src): return _to_javascript(to_pythonjs(src))');
Python.eval('def to_dart(src): return _to_dart(to_pythonjs(src, dart=True))');
Python.eval('def to_coffee(src): return _to_coffee(to_pythonjs(src, coffee=True))');
Python.eval('def to_lua(src): return _to_lua(to_pythonjs(src, lua=True))');

function clean_code( code ) {
	code = code.substring(1, code.length-1);  // strip quotes
	code = code.split('\\n').join('\n');
	code = code.split("\\'").join("\'");
	code = code.split('\\"').join('\"');
	return code;
}

// data is written to a file to avoid any problems with escaping string quotes
// note: `FS.createDataFile` is part of the old Emscripten 1.0 API

exports.translator = {
	to_javascript : function(data) {
		empythoned.FS.createDataFile( "/sandbox", "temp", data, true, true );
		var code = Python.eval('to_javascript(open("/sandbox/temp","r").read())');
		if (code !== null && code !== undefined) {
			return clean_code( code );
		}
	},
	to_dart : function(data) {
		empythoned.FS.createDataFile( "/sandbox", "temp", data, true, true );
		var code = Python.eval('to_dart(open("/sandbox/temp","r").read())');
		if (code !== null && code !== undefined) {
			return clean_code( code );
		}
	},
	to_coffee : function(data) {
		empythoned.FS.createDataFile( "/sandbox", "temp", data, true, true );
		var code = Python.eval('to_coffee(open("/sandbox/temp","r").read())');
		if (code !== null && code !== undefined) {
			return clean_code( code );
		}
	},
	to_lua : function(data) {
		empythoned.FS.createDataFile( "/sandbox", "temp", data, true, true );
		var code = Python.eval('to_lua(open("/sandbox/temp","r").read())');
		if (code !== null && code !== undefined) {
			return clean_code( code );
		}
	},
	to_visjs : function(data) {
		empythoned.FS.createDataFile( "/sandbox", "temp", data, true, true );
		var code = Python.eval('to_visjs(open("/sandbox/temp","r").read())');
		if (code !== null && code !== undefined) {
			return clean_code( code );
		}
	}
}
